// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Books.Api.DataAccess.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    partial class BooksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Books.Api.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2f"),
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2e"),
                            FirstName = "George",
                            LastName = "Martin"
                        });
                });

            modelBuilder.Entity("Books.Api.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2d"),
                            AuthorId = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2f"),
                            Description = "A horror novel about an evil hotel.",
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2c"),
                            AuthorId = new Guid("c0a80121-48aa-48b0-8c0c-927b1f8eac2e"),
                            Description = "The first book in the A Song of Ice and Fire series.",
                            Title = "A Game of Thrones"
                        });
                });

            modelBuilder.Entity("Books.Api.Entities.Book", b =>
                {
                    b.HasOne("Books.Api.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
